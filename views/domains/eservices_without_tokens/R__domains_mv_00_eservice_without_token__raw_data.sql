CREATE SCHEMA IF NOT EXISTS sub_views;

GRANT USAGE ON SCHEMA sub_views TO GROUP readonly_group;

DROP MATERIALIZED VIEW IF EXISTS sub_views.mv_00_eservice_without_token__raw_data CASCADE;

-- We need to know which eservices are authorized by generated token and which aren't.
--  __N.B.__: we are not interested in "self-traffic" that is token asked by the same 
--            tenant exposing the eservice.
-- We can't use lateral (left or right) join; due to a limitation of redshift 
--  materilized views incremental refresh.
-- As a workaround we generate a record for each active eservice and 
--  one for each JWT authorizing that eservice; each record has usage_weight field that 
--  can assume 0 or 1 value. Making sum of the usage_weight field as a result 
--  we can assume that eservices with total usage_weight equals 0 are eservices
--  never invoked by tenants different from the eservice owner.
CREATE MATERIALIZED VIEW sub_views.mv_00_eservice_without_token__raw_data AUTO REFRESH YES AS 
  select 
    t.name as producer_name,
    e.id as eservice_id,
    0 as usage_weight
  from
    domains.eservice e
    join domains.tenant t on e.producer_id = t.id
  where
      not coalesce( e.deleted, false )
    and
      not coalesce( t.deleted, false )
  union all
  select 
    t.name as producer_name,
    e.id as eservice_id,
    1 as usage_weight
  from
    domains.eservice e
    join domains.tenant t on e.producer_id = t.id
    join jwt.generated_token_audit jwt
         on jwt.eservice_id = e.id
    join domains.agreement a on a.id = jwt.agreement_id
  where
      not coalesce( e.deleted, false )
    and
      not coalesce( t.deleted, false )
    and
      not coalesce( a.deleted, false )
    and
      a.consumer_id <> a.producer_id -- Exclude traffic generated by producer itself.
;


